import binascii
import sys

def unsafe():
    print("Warning!! This is an unsafe file")
    sys.exit()

def extensions(idx, hexc):
    idx += 2
    while True:
        if idx + 2 > len(hexc):
            unsafe()
        block_type = hexc[idx:idx+2]
        if block_type == 'f9':
            idx += 14
        elif block_type == '01' or block_type == 'ff':
            s = int(hexc[idx+2:idx+4], 16)
            idx += 2 + (s * 2)
            return idx
        elif block_type == 'fe':
            idx += 2
            return idx
        elif block_type == '2c':
            packed = hexc[idx+18:idx+20]
            packed = "{0:08b}".format(int(packed, 16))
            if packed[7] == '1':
                N = int(packed[0:3], 2) + 1
                LCT = pow(2, N)
            else:
                LCT = 0
            idx += 20 + (3 * LCT) + 2
        else:
            print(f"Unexpected extension at index {idx}: {block_type}")
            unsafe()

if __name__ == "__main__":
    filename = r"C:\Users\Admin\OneDrive\Desktop\malware\VeC.gif"
    try:
        with open(filename, 'rb') as f:
            content = f.read()
    except IOError:
        print("File not found")
        sys.exit()

    hexc = binascii.hexlify(content).decode("utf-8")

    if hexc[:4] != '4749' or hexc[8:12] != '3961':
        unsafe()

    packed = hexc[20:22]
    packed = "{0:08b}".format(int(packed, 16))
    if packed[0] == '1':
        N = int(packed[5:8], 2) + 1
        GCT = pow(2, N)
    else:
        GCT = 0

    skip = (6 + 2) + (7 + 2) + (3 * GCT)
    idx = skip

    print(f"Starting main loop with initial index {idx}")

    while True:
        if idx >= len(hexc):
            print("Index out of bounds")
            unsafe()

        block_type = hexc[idx:idx+2]
        if block_type == '2c':
            packed = hexc[idx+18:idx+20]
            packed = "{0:08b}".format(int(packed, 16))
            if packed[7] == '1':
                N = int(packed[0:3], 2) + 1
                LCT = pow(2, N)
            else:
                LCT = 0
            idx += 20 + (3 * LCT) + 2
        elif block_type == '3b':
            print("End of file reached")
            break
        elif block_type == '21':
            idx = extensions(idx, hexc)
        else:
            while idx + 2 <= len(hexc) and hexc[idx:idx+2] != '00':
                s = int(hexc[idx:idx+2], 16)
                idx += 2 + (s * 2)
            idx += 2

        if idx >= len(hexc):
            print("Index out of bounds")
            unsafe()

        print(f"Current index: {idx}")

    if len(hexc) != idx + 2:
        unsafe()
    else:
        print("Congratulations!! This GIF is safe to use")
